module realworld.chapter4.B_SplitLines where

import realworld.util.Assertions(assert)

-- remember that unlike Haskell the types String and [Char] are not the same in Frege
-- therefore we have to do some packing/unpacking to play with the book example

splitLines [] = []
splitLines cs =
    let (pre, suf) = break isLineTerminator cs
    in pre : ( case suf of
            ('\r':'\n':rest)    -> splitLines rest
            ('\r':rest)         -> splitLines rest
            ('\n':rest)         -> splitLines rest
            _                   -> []
       ) -- attention! this needs extra parens and closing one must line up with "pre"

isLineTerminator c = c == '\r' || c == '\n'

main _ = do
     assert (splitLines [])                      ([])                               "empty"
     assert (splitLines (unpacked ""))           ([])                               "empty String"
     assert (splitLines (unpacked "a\rb"))       (map unpacked [ "a", "b"])         "cr"
     assert (splitLines (unpacked "a\nb"))       (map unpacked [ "a", "b"])         "lf"
     assert (splitLines (unpacked "a\r\nb"))     (map unpacked [ "a", "b"])         "crlf"
     -- I assume the below was not by design but is an error in the book
     assert (splitLines (unpacked "\ra\n\rb\n")) (map unpacked [ "", "a","", "b"])  "edge cases"