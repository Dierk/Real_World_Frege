module realworld.chapter2.Evaluation where

import util.Assertions(assert)

x = 10
-- x = 11 -- as expected does not compile

-- conditional evaluation
mydrop :: Int -> [a] -> [a]  -- from the section on polymorphism
mydrop n xs = if n <= 0 || null xs
              then xs
              else mydrop (n-1) (tail xs)

nada = drop 1 [0]  -- this is a hack to get an empty list of ints

main _ = do
    assert (mydrop 2 [1,2,3])   [3]    "normal case"
    assert (mydrop 0 [3])       [3]    "edge case 1"
    assert (mydrop 2 [1,2])     nada   "edge case 2"
    assert (mydrop 2 nada)      nada   "underrun 1"
    assert (mydrop (-2) [1,2])  [1,2]  "underrun 2"

    println (drop 16_000_000 [1..16_000_001]) -- exhausts the machine (all 8 cores at 100%)

    --  frege> :type null
    --  Empty ? => ? ? -> Bool

