module realworld.chapter2.CompositeTypes where

import realworld.util.Assertions(assert)

main _ = do
    assert (head [1,2,3,4])         1   "integer head"
    assert (head ['a', 'b', 'c'])   'a' "char head"

    assert (tail [1,2,3,4]) [2,3,4]     "tail of an integer list"
    assert (tail [2,3,4])   [3,4]       "tail of a tail"

    assert (tail [true, false]) [false] "tail of a boolean list"
    assert (tail "list")    "ist"       "even though Strings are no lists, you can use tail on it"
    assert (head "list")    'l'         "head of a String"

    -- assert (tail [] :: [()])       -- as expected compiles but throws Undefined exception at runtime

    println ((1964, "Labyrinths"))    -- we can construct a tuple
    println ((4, ['a', 'm'], (16, true))) -- triple of value, list, and pair

    assert ((false, 'a') :: (Bool, Char)) (false, 'a') "with and without type declaration"
