module realworld.chapter3.I_Exercise_4 where

-- Turn a list into a palindrome

import realworld.util.Assertions(assert)

palindrome :: [a] -> [a]
palindrome []     = []
palindrome (x:xs) = [x] ++ palindrome xs ++ [x]

-- A simple, non-recursive alternative
palindrome' :: [a] -> [a]
palindrome' [] = []
palindrome' xs = xs ++ reverse xs

main _ = do
    let typedEmptyList = [] :: [()] -- explicit type declaration is required in Frege

    assert (palindrome  [1,2,3]) [1,2,3,3,2,1]  "example list palindrome (recursive)"
    assert (palindrome  [])      typedEmptyList "empty list palindrome (recursive)"

    assert (palindrome' [1,2,3]) [1,2,3,3,2,1]  "example list palindrome (non-recursive)"
    assert (palindrome' [])      typedEmptyList "empty list palindrome (non-recursive)"